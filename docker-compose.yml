version: '3.8'

services:
  auth_service:
    container_name: auth_service
    build:
      context: ./auth_service
    ports:
      - 8081:8080
    depends_on:
      - db
    networks:
      - app_network
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}

  backend_service:
    container_name: backend_service
    build:
      context: ./backend_service
    ports:
      - 8082:8080
    depends_on:
      - db
    networks:
      - app_network
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}

  db:
    container_name: db
    image: postgres:alpine
    ports:
      - 5433:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network

  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
    depends_on:
      - auth_service
      - backend_service
    networks:
      - app_network
      
  # React Frontend
  react_frontend:
    build: ../reactjs_fe_genai_plgrnd
    depends_on:
      - backend_service
      - auth_service
    ports:
      - 3000:3000
    restart: always
    networks:
      - app_network
    volumes:
      - ./.env:/usr/src/app/.env  
      
networks:
  app_network:
    driver: bridge 
